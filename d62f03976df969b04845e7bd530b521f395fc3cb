Revision: d62f03976df969b04845e7bd530b521f395fc3cb
Patch-set: 1
File: core/clear_vars.mk

184:0-184:28
Tue Jun 09 01:49:09 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9d9cc70_7f5a5002
Bytes: 79
Why do we need this new variable?
It looks like we can use just LOCAL_SANITIZE.

184:0-184:28
Tue Jun 09 23:25:29 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9d9cc70_7f5a5002
UUID: 3937486d_84d848e9
Bytes: 217
We set LOCAL_SANITIZE in one of the two builds initiated by this variable setting. Maybe we could use some build-system-internal variable to say "build the current target with sanitizer" and re-purpose LOCAL_SANITIZE?

184:0-184:28
Wed Jun 10 00:30:32 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3937486d_84d848e9
UUID: d902ac8c_bb257be5
Bytes: 156
Yes, I think so.
LOCAL_SANITIZE is supposed to be Android.mk settable. We should use an internal variable to distinguish the auto-generated module variants.

File: core/static_library.mk

118:0-118:5
Tue Jun 09 01:49:09 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 796b8031_516ebfab
Bytes: 119
I think the above else block can be removed, if we manipulate some variables to have the first block handle both cases.

