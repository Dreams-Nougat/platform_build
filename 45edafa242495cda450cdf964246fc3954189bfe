Revision: 45edafa242495cda450cdf964246fc3954189bfe
Patch-set: 1
File: tools/makeparallel/README.md

23:0-28:40
Wed Sep 09 02:38:53 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44cedaa4_fa98a16e
Bytes: 465
Sounds like the number you get isn't deterministic - it depends on how many tokens remaining in the pipe when makeparallel is running.
In what situations you need to pass this number down to ninja?
I can imagine that if distributed backend (such as goma) is used, we may want to specify a number much bigger than the cpu cores as parallelism. In that case it's probably better to hard-code the parallelism in the build system, as KATI_REMOTE_NUM_JOBS_FLAG does now.

23:0-28:40
Wed Sep 09 23:50:52 2015 +0000
Author: Colin Cross <1002751@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44cedaa4_fa98a16e
UUID: 244c8613_6452e0aa
Bytes: 609
It's deterministic as long as the makeparallel rule is the only one running.  For wrapping ninja, the ninja rule depends on all the other rules so it will always be the only one running and always get the same -j value passed to make.

I missed the local_pool implementation in kati, I can change the next patch to pass -j to kati instead of to ninja.  It's a little unfortunate that the -j value ends up in the build.ninja file, as that means the file needs to be regenerated every time a different -j value is passed.  Maybe for non-goma I should pass it to ninja, and kati should not use local_pool at all?

23:0-28:40
Fri Sep 11 01:26:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 244c8613_6452e0aa
UUID: 24c9e69c_f5666bb0
Bytes: 150
Sounds good to me. Shinichiro?
though I still don't get why we need to pass -j to ninja, which supposedly enables running jobs in parallel by default.

23:0-28:40
Fri Sep 11 01:28:46 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24c9e69c_f5666bb0
UUID: e4c34e74_f8e9c82a
Bytes: 130
Because I'd like it to be configurable. Cores + 2 isn't a good default when running ART tests, for example (yes, even when niced).

File: tools/makeparallel/makeparallel.cpp

174:11-174:60
Fri Sep 11 01:26:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44fdfae7_85ca282c
Bytes: 44
we don't return the tokens in this function.

228
Tue Sep 08 19:43:53 2015 +0000
Author: Dan Willemsen <1074628@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 04c1426c_fa3789c6
Bytes: 132
shouldn't there be an else case here that prints out a warning that we couldn't find a jobserver, and will run the command with -j1?

228
Tue Sep 08 19:48:29 2015 +0000
Author: Colin Cross <1002751@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 04c1426c_fa3789c6
UUID: 24c9e69c_b3a2589b
Bytes: 235
If GetJobserver returns false then there was no --jobserver in MAKEFLAGS, which implies the top level make was run with -j1 or no -j argument.  Tokens is initialized to zero, so this falls through and passes -j1 to the wrapped command.

