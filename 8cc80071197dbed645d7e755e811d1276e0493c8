Revision: 8cc80071197dbed645d7e755e811d1276e0493c8
Patch-set: 3
File: core/definitions.mk

2191:0-2191:7
Wed Jan 13 23:56:07 2016 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 27673e34_9e779a1b
Bytes: 118
You don't need to to call $(shell) here: the build recipe itself is shell script. Use shell construct $$(...) instead.

2193:0-2193:5
Wed Jan 13 23:56:07 2016 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 676db610_91530b1a
Bytes: 612
For platform build (system.img), shouldn't we always use $(PLATFORM_SDK_VERSION)?
Looks to me we only need the apk's minSdkVersion if the apk is about to be installed in older system, right?
In that case, we only need the dumped sdkVersion for unbundled build. You can write it as:

ifdef TARGET_BUILD_APPS
# Unbundled build
define get-package-min-sdk-version-int
$$($(AAPT) dump badging $(1) 2>&1 | grep '^sdkVersion' | cut -d"'" -f2 | \
    sed -e s/^$(PLATFORM_VERSION_CODENAME)$$/$(PLATFORM_SDK_VERSION)/)
endef
else
# Platform build
define get-package-min-sdk-version-int
$(PLATFORM_SDK_VERSION)
endef
endif

2193:0-2193:5
Thu Jan 14 01:48:45 2016 +0000
Author: Alex Klyubin <1018773@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 676db610_91530b1a
UUID: 676db610_2c09fc43
Bytes: 779
For platform builds, is it actually guaranteed that nobody takes the APK the build produces and then reuse them elsewhere? I'm simply trying to be conservative/cautious here. If this is not a concern, then, indeed, we can ignore APK's minSdkVersion and instead use $(PLATFORM_SDK_VERSION).

A similar concern applies to the sign target files Python script (also in this change). Right now, I'm being conservative there and relying on each APK's minSdkVersion. However, since we're signing a build there, we know which platform version / API Level these APKs will be pre-installed on and thus can use that platform's API Level instead. Again, this is only OK if nobody extracts APKs from those signed ZIP files and reuses them elsewhere.

Which approach do you and Baligh suggest?

2193:0-2193:5
Thu Jan 14 02:03:03 2016 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 676db610_2c09fc43
UUID: 07495aa4_5a7d14fb
Bytes: 191
Serious players shouldn't be doing that (Baligh should have more say than I do). But you can't prevent individual persons from doing that. If people do that, what error message will they get?

2193:0-2193:5
Thu Jan 14 02:40:48 2016 +0000
Author: Alex Klyubin <1018773@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 07495aa4_5a7d14fb
UUID: 4768b202_689abe89
Bytes: 806
If somebody extracts such a minSdkVersion 15 APK from, say, an M or N target files ZIP and then installs it on a platform with, say, API Level 16, that platform won't be able to verify the APK signatures (because it doesn't support APKs signed using SHA-256) and thus will refuse to install/upgrade the APK.

I'm happy to make our life simpler and ignore minSdkVersion in this CL, if Baligh agrees. To be fair, in the past, APKs from target files ZIP couldn't be used outside of the system partition anyway because they might have been missing classes.dex or .so files. Not sure whether this is the case these days...

P. S. If we do go for the simpler solution, I'd also love to add the "Serious players shouldn't be doing that" quote to the relevant bit of the scripts, with your permission of course. :)

2193:0-2193:5
Thu Jan 14 20:05:12 2016 +0000
Author: Baligh Uddin <1018026@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4768b202_689abe89
UUID: 274e5eac_8853d419
Bytes: 248
but, if the requirement is that APK minSDK version is needed to evaluate whether we use SHA1 vs SHA256, how will using PLATFORM_SDK_VERSION help ?  Isn't Platform_SDK_version almost always higher than min_SDK.

Sorry I don't understand - so asking.

2193:0-2193:5
Thu Jan 14 20:31:30 2016 +0000
Author: Alex Klyubin <1018773@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 274e5eac_8853d419
UUID: c75ca266_cc4e82bd
Bytes: 1237
The finer point is that it depends only on the platform's API Level whether SHA-256 signatures can be verified by the platform. An APK's minSdkVersion (as long as its equal to or lower than platform's API Level) is irrelevant for the verification.

Thus, if we're signing APKs for a platform with API Level 23, we know for a fact that SHA-256 signatures will be verified just fine by that platform. It doesn't matter whether an APK says that its minSdkVersion is, say, 15.

The catch is that somebody could take such a signed APKs and attempt to install it on older platforms. In this hypothetical example, the APK itself says it's fine to install it on platforms with API Level 15 or newer. However, if it's signed with SHA-256, then it'll fail to install on anything older than API Level 18. Thus, I was trying to be very conservative here and use SHA-256 only if the APK being signed declares minSdkVersion 18 or higher.

If we don't need that level of conservatism, we can indeed ignore APKs' minSdkVersion and simply rely on API Level of the platform for which we're signing APKs. If the build is unbundled, then we'd still need to rely on minSdkVersion instead (exactly as Ying proposed in his code snippet earlier in this thread).

2200:4-2200:75
Wed Jan 13 23:56:07 2016 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 678e9643_1560b30a
Bytes: 260
For platform build (system.img), shouldn't we always use $(PLATFORM_SDK_VERSION)?
Looks to me we only need the apk's minSdkVersion if the apk is about to be installed in older system, right?
In that case, we only need the dumped sdkVersion for unbundled build.

2200:4-2200:75
Wed Jan 13 23:56:58 2016 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 678e9643_1560b30a
UUID: 07623a24_bfb9b294
Bytes: 62
Please ignore this.  I just moved the comment up a little bit.

