#!/usr/bin/env python

import ConfigParser
import re
import sys


GENERATED = '''
/*
 * THIS IS AN AUTOGENERATED FILE! DO NOT MODIFY
 */
'''

INCLUDE = '#include <private/android_filesystem_config.h>'

DEFINE_NO_DIRS = '#define NO_ANDROID_FILESYSTEM_CONFIG_DEVICE_DIRS\n'
DEFINE_NO_FILES = '#define NO_ANDROID_FILESYSTEM_CONFIG_DEVICE_FILES\n'

DEFAULT_WARNING = '#warning No device-supplied android_filesystem_config.h, using empty default.'

NO_ANDROID_FILESYSTEM_CONFIG_DEVICE_DIRS_ENTRY = '{ 00000, AID_ROOT,      AID_ROOT,      { 0, 0 }, "system/etc/fs_config_dirs" },'
NO_ANDROID_FILESYSTEM_CONFIG_DEVICE_FILES_ENTRY = '{ 00000, AID_ROOT,      AID_ROOT,      { 0, 0 }, "system/etc/fs_config_files" },'

IFDEF_ANDROID_FILESYSTEM_CONFIG_DEVICE_DIRS = '#ifdef NO_ANDROID_FILESYSTEM_CONFIG_DEVICE_DIRS'
ENDIF = '#endif'

OPEN_FILE_STRUCT = 'static const struct fs_path_config android_device_files[] = {'
OPEN_DIR_STRUCT = 'static const struct fs_path_config android_device_dirs[] = {'
CLOSE_FILE_STRUCT = '};'

GENERIC_DEFINE = "#define %s\t%s"

FILE_COMMENT = '// Defined in file: \"%s\"'

# from system/core/include/private/android_filesystem_config.h
AID_OEM_RESERVED_RANGES = [
    (2900, 2999),
    (5000, 5999),
]


AID_MATCH = re.compile('AID_[a-zA-Z]+')

def handle_aid(file_name, section_name, config, aids, seen_aids):
    value = config.get(section_name, 'value')

    errmsg = '%s for: \"' + section_name + '" file: \"' + file_name + '\"'

    if not value:
        raise Exception(errmsg % 'Found specified but unset "value"')

    v = convert_int(value)
    if not v:
        raise Exception(errmsg % ('Invalid "value", not a number, got: \"%s\"' % value))

    # Values must be within OEM range
    if not any(lower <= v <= upper for (lower, upper) in AID_OEM_RESERVED_RANGES):
        s = '"value" not in valid range %s, got: %s'
        s = s % (str(AID_OEM_RESERVED_RANGES), value)
        raise Exception(errmsg % s)

    # use the normalized int value in the dict and detect
    # duplicate definitions of the same vallue
    v = str(v)
    if v in seen_aids[1]:
        # map of value to aid name
        a = seen_aids[1][v]

        # aid name to file
        f = seen_aids[0][a]

        s = 'Duplicate AID value "%s" found on AID: "%s".' % (value, seen_aids[1][v])
        s += ' Previous found in file: "%s."' % f
        raise Exception(errmsg % s)

    seen_aids[1][v] = section_name

    # Append a tuple of (AID_*, base10(value), str(value))
    # We keep the str version of value so we can print that out in the
    # generated header so investigating parties can identify parts.
    # We store the base10 value for sorting, so everything is ascending
    # later.
    aids.append((file_name, section_name, v, value))

def convert_caps(capabilities):
        tmp = []
        for x in capabilities:
            try:
                int(x, 0)
                tmp.append('(' + x + ')')
            except ValueError:
                tmp.append('(1ULL << CAP_' + x.upper() + ')')
	return '|'.join(tmp)

def handle_path(file_name, section_name, config, files, dirs):

            mode = config.get(section_name, 'mode')
            user = config.get(section_name, 'user')
            group = config.get(section_name, 'group')
            permitted = config.get(section_name, 'permitted')
            inheritable = config.get(section_name, 'inheritable')

            errmsg = 'Found specified but unset option: \"%s" in file: \"' + file_name + '\"'

            if not mode:
                raise Exception(errmsg % 'mode')

            if not user:
                raise Exception(errmsg % 'user')

            if not group:
                raise Exception(errmsg % 'group')

            if not permitted:
                raise Exception(errmsg % 'permitted')

            if not inheritable:
                raise Exception(errmsg % 'inheritable')

            permitted = convert_caps(permitted.split())
            inheritable = convert_caps(inheritable.split())

            path = '"' + section_name + '"'

            if len(mode) == 3:
                mode = '0' + mode

            try:
                int(mode, 8)
            except:
                raise Exception('Mode must be octal characters, got: "' + mode + '"')

            if len(mode) != 4:
                raise Exception('Mode must be 3 or 4 characters, got: "' + mode + '"')

            x = {
                "path" : section_name,
                "mode" : mode,
                "user" : user,
                "group" : group,
                "capabilities" : {
                    "permitted" : permitted,
                    "inheritable" : inheritable
                }
            }
            if section_name[-1] == '/':
                dirs.append({ "source_file" : file_name, "config" : x })
            else:
                files.append({ "source_file" : file_name, "config" : x })

def handle_dup(name, file_name, section_name, seen):
        if section_name in seen:
            dups = '"' + seen[section_name] + '" and '
            dups += file_name
            raise Exception('Duplicate ' + name + ' "' + section_name + '" found in files: ' + dups)

def parse(file_name, files, dirs, aids, seen_paths, seen_aids):

        config = ConfigParser.ConfigParser()
        config.read(file_name)

        for s in config.sections():

            if AID_MATCH.match(s) and config.has_option(s, 'value'):
                handle_dup('AID', file_name, s, seen_aids[0])
                seen_aids[0][s] = file_name
                handle_aid(file_name, s, config, aids, seen_aids)
            else:
                handle_dup('path', file_name, s, seen_paths)
                seen_paths[s] = file_name
                handle_path(file_name, s, config, files, dirs)

def config_to_str(config):
        path = '"' + config["path"] + '"'
        mode = config["mode"]
        user = config["user"]
        group = config["group"]
	cap_config = config["capabilities"]
	capabilites = "{ .permitted=" + cap_config["permitted"] + ", .inheritable=" + cap_config["inheritable"] + " }"
	return "{" + ", ".join([mode, user, group, capabilites, path]) + "},"

def generate(files, dirs, aids):
    print GENERATED
    print INCLUDE
    print

    are_dirs = len(dirs) > 0
    are_files = len(files) > 0
    are_aids = len(aids) > 0

    if are_aids:
        # sort on value of (file_name, name, value, strvalue)
        aids.sort(key=lambda x: x[2])
        for a in aids:
            # use the preserved str value
            print FILE_COMMENT % a[0]
            print GENERIC_DEFINE % (a[1], a[2])

        print

    if not are_dirs:
        print DEFINE_NO_DIRS

    if not are_files:
        print DEFINE_NO_FILES

    if not are_files and not are_dirs and not are_aids:
        print DEFAULT_WARNING
        return

    if are_files:
        print OPEN_FILE_STRUCT
        for file_config in files:
            source_file = file_config["source_file"]
            print '    ' + config_to_str(file_config["config"])

        if not are_dirs:
            print IFDEF_ANDROID_FILESYSTEM_CONFIG_DEVICE_DIRS
            print '    ' + NO_ANDROID_FILESYSTEM_CONFIG_DEVICE_DIRS_ENTRY
            print ENDIF
        print CLOSE_FILE_STRUCT

    if are_dirs:
        print OPEN_DIR_STRUCT
        for dir_config in dirs:
            source_file = dir_config["source_file"]
            print '    ' + config_to_str(dir_config["config"])

        print CLOSE_FILE_STRUCT

def file_key(x):

    # Wrapper class for custom prefix matching strings
    class S(object):
        def __init__(self, str):

            self.orig = str
            self.is_prefix = str[-1] == '*'
            if self.is_prefix:
                self.str = str[:-1]
            else:
                self.str = str

        def __lt__(self, other):

            # if were both suffixed the smallest string
            # is 'bigger'
            if self.is_prefix and other.is_prefix:
                b = len(self.str) > len(other.str)
            # If I am an the suffix match, im bigger
            elif self.is_prefix:
                b = False
            # If other is the suffix match, he's bigger
            elif other.is_prefix:
                b = True
            # Alphabetical
            else:
                b = self.str < other.str
            return b

    return S(x["path"])

def main():

    files = []
    dirs = []
    aids = []
    seen_paths = {}

    # (name to file, value to aid)
    seen_aids = ({}, {})

    for x in sys.argv[1:]:
        parse(x, files, dirs, aids, seen_paths, seen_aids)

    files.sort(key= lambda x: file_key(x["config"]))
    generate(files, dirs, aids)

if __name__ == '__main__':
    main()
