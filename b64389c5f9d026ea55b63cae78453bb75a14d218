Revision: b64389c5f9d026ea55b63cae78453bb75a14d218
Patch-set: 3
File: core/java.mk

530:0-530:25
Wed Nov 18 22:18:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb75bfb9_5c1cccf4
Bytes: 6
remove

530:0-530:25
Thu Nov 19 11:09:55 2015 +0000
Author: Yohann Roussel <1023201@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb75bfb9_5c1cccf4
UUID: 56278298_efcaf11f
Bytes: 4
Done

533:0-533:72
Wed Nov 18 22:18:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb75bfb9_3fa8e29a
Bytes: 226
In the previous implementation, we don't have proguard_dictionary as a dependency target. Instead we establish the dependency directly on $(link_instr_intermediates_dir.COMMON)/proguard.classes.jar.

Jack can also go that way.

533:0-533:72
Thu Nov 19 11:09:55 2015 +0000
Author: Yohann Roussel <1023201@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb75bfb9_3fa8e29a
UUID: 569062ca_07363c91
Bytes: 240
Ok I see the lack of coherency there. I feel more comfortable to depend on the used file instead of depending on the file known to be built at the same time. So maybe I could modify the legacy rules to align them on that. What do you think?

533:0-533:72
Fri Nov 20 00:28:54 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 569062ca_07363c91
UUID: 5b816bc7_2cd8bc45
Bytes: 69
I don't have strong opinion. I prefer the legacy setup: it's simpler.

540:0-541:89
Wed Nov 18 22:18:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_5ecc973a
Bytes: 9
see here.

645:20-645:45
Wed Nov 18 22:18:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db847bce_b0c2da81
Bytes: 316
Though I don't think we have any such cases in the source tree for now, but if it's a static Java library, it should be
$(jack_dictionary) : $(full_classes_jack)

Following the existing approach, we can also establish the dependency as: 
$(built_dex_intermediate) : $(link_instr_intermediates_dir.COMMON)/classes.dex

645:20-645:45
Thu Nov 19 11:09:55 2015 +0000
Author: Yohann Roussel <1023201@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db847bce_b0c2da81
UUID: 3b4e7783_2ef66bbc
Bytes: 4
Done

File: core/java_common.mk

284:0-285:87
Wed Nov 18 22:18:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b816bc7_8bf9bdec
Bytes: 336
I found a problem here:
full_shared_jack_libs are the proguarded .jack files.
Won't that cause compilation error if a library is obfuscated? because the symbol references in the current module's source are original unobfuscated one.
That's why when jack is disabled, we link against the classes.jar, the file before Proguard processing.

284:0-285:87
Thu Nov 19 11:09:55 2015 +0000
Author: Yohann Roussel <1023201@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b816bc7_8bf9bdec
UUID: 3b4e7783_8e543f4b
Bytes: 305
I agree, obfuscated library will cause compilation error here. But won't they cause runtime failure if we compile against the unobfuscated .jack? I mean we handle no other mapping/dictionary than the one given by LOCAL_INSTRUMENTATION_FOR, so nothing to handle an eventual obfuscated LOCAL_JAVA_LIBRARIES.

284:0-285:87
Thu Nov 19 23:55:53 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b4e7783_8e543f4b
UUID: 5b25eb9e_a44a7556
Bytes: 512
Yes, we need to make sure the dependent uses the library's dictionary, not hard by setting up the dependency and LOCAL_PROGUARD_FLAGS in the dependent's Android.mk.
No existing use case for now. But I remember Narayan asked me for this kind of thing not long time ago.

If we have dependency on classes.noshrob.jack, that means we'll be also building all library's classes.noshrob.jack, which we don't build previously, in addition to classes.jack.

It's fine to leave it as is now. But probably put a note here.

301:8-302:48
Wed Nov 18 22:18:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b816bc7_2bfe69d3
Bytes: 13
similar here.

315:3-315:89
Wed Nov 18 22:18:59 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b6aafda_966a3d94
Bytes: 16
this is correct.

