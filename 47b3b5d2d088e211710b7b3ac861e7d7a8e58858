Revision: 47b3b5d2d088e211710b7b3ac861e7d7a8e58858
Patch-set: 3
File: /COMMIT_MSG

21:0-22:41
Wed Oct 08 03:30:52 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 50c5985b_d8c03126
Bytes: 262
I think if we had PRODUCT_DEX_PREOPT_BOOT_DEFAULT_FLAGS as well, we could use that for WITH_ART_SMALL_MODE so it wouldn't have to be a "#if ART_SMALL_MODE" in the code (assuming we also set some PRODUCT_PROPERTY_OVERRIDES as well. but that can be another change.

22
Wed Oct 08 16:45:28 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 50c5985b_d8c03126
UUID: b007b451_8ba29e09
Bytes: 31
Sorry, I forgot that bit.
Done.

File: core/dex_preopt_odex_install.mk

11
Wed Oct 08 23:31:00 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0992c84_9b64d7bf
Bytes: 9
See here.

15:0-16:37
Wed Oct 08 16:58:11 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a8f091_efd60179
Bytes: 163
Should this be:

ifneq (,$(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG))
  LOCAL_DEX_PREOPT := $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG)
else ..

16
Wed Oct 08 17:12:03 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a8f091_efd60179
UUID: f0b4ccdf_295b99d2
Bytes: 216
No, as the commit message says $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG) can be used either to disable LOCAL_DEX_PREOPT or pass dex2oat command line flags, for which we added a new LOCAL_DEX_PREOPT_FLAGS.

16
Wed Oct 08 22:59:56 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0b4ccdf_295b99d2
UUID: f0992c84_181e2dd2
Bytes: 285
I think this is making it confusing as to whose flag has precedent. If a project sets LOCAL_DEX_PREOPT := true then this is overridden by $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG) being set false but the opposite isn't true. I'm awash in a see of global variables anyway...

16
Wed Oct 08 23:31:00 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0992c84_181e2dd2
UUID: f0992c84_3b768b7c
Bytes: 215
No, we run to this point only if LOCAL_DEX_PREOPT is not set by the project. The precedence is:
project's LOCAL variable > $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG)  > $(PRODUCT_DEX_PREOPT_DEFAULT_FLAGS)

16
Thu Oct 09 22:35:24 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0992c84_3b768b7c
UUID: 10bfa0c3_b254694d
Bytes: 107
But why can't $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG) be other values than false to override?

16
Thu Oct 09 22:48:24 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10bfa0c3_b254694d
UUID: 5073d823_eb85052c
Bytes: 12
Sure it can.

103
Thu Oct 09 22:48:24 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9081d019_b0c53e47
Bytes: 93
Here is when $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG) is other value than false.

103
Fri Oct 10 00:23:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9081d019_b0c53e47
UUID: 10bfa0c3_156c27a3
Bytes: 117
But in that case the value is flags. What if I set DEX_PREOPT_DEFAULT:=false then try to set specific things to true?

103
Fri Oct 10 00:40:25 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10bfa0c3_156c27a3
UUID: 106de043_66c87080
Bytes: 566
Sorry, I don't understand. If DEX_PREOPT_DEFAULT:=false, we don't do dex-preot for the module at all. Why bother to set module specific thing?
Also I believe we introduced DEX_PREOPT_DEFAULT to accommodate  "nostripping" when we wanted to preserve the classes.dex inside apks to allow dual boot. This flag should be gone now as we have removed dalvik.
Again, this change allows  you to attach an arbitrary string to a module in a product configuration. It's not meant to finalize how we interpret the string. We can improve that when the requirement becomes clearer.

File: core/product.mk

294:2-294:25
Wed Oct 08 16:58:11 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0a334b2_b3346200
Bytes: 54
I couldn't parse this, likely user error on my behalf.

294
Wed Oct 08 17:12:03 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0a334b2_b3346200
UUID: b007b451_0b850e63
Bytes: 144
We want to replace all whitespaces in the config with the following string, so it appears as a single word in PRODUCT_DEX_PREOPT_MODULE_CONFIGS.

File: core/product_config.mk

419:44-419:51
Wed Oct 08 16:58:11 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a8f091_efad21f9
Bytes: 8
configs.

419:14-419:20
Wed Oct 08 16:58:11 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0a334b2_136b6ee4
Bytes: 5
setup

419
Wed Oct 08 17:12:03 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a8f091_efad21f9
UUID: b007b451_ab6b2210
Bytes: 4
Done

419
Wed Oct 08 17:12:03 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0a334b2_136b6ee4
UUID: b007b451_4b66f64a
Bytes: 4
Done

422:27-422:32
Wed Oct 08 16:58:11 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a8f091_cfb05d54
Bytes: 6
setups

422
Wed Oct 08 17:12:03 2014 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a8f091_cfb05d54
UUID: 10bfa0c3_79c8ff7f
Bytes: 4
Done

