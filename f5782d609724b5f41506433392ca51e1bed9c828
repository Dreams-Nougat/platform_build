Revision: f5782d609724b5f41506433392ca51e1bed9c828
Base-for-patch-set: 6
File: tools/releasetools/blockimgdiff.py

374
Wed Oct 21 07:34:45 2015 +0000
Author: Alvin Cao <1073563@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 761f2555_95ba24f2
Bytes: 217
stashed_blocks is used to calculate the max stash size later. I don't think it can be deducted here because they are not actually freed. The free commands are just collected but not appended to the output buffer here.

374
Wed Oct 21 20:18:32 2015 +0000
Author: Tao Bao <1056365@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 761f2555_95ba24f2
UUID: 99784a71_d9435709
Bytes: 399
I thought about this part some time ago. Although it's not writing the "free" commands immediately here, the effect should be negligible. Because the only command that will be emitted prior to the "free" would be the current command in xf (new/move/bsdiff/imgdiff/zero and etc). The "free" command will be written right after the current command. We are not using stashed_blocks anywhere in-between.

374
Thu Oct 22 01:29:27 2015 +0000
Author: Alvin Cao <1073563@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 99784a71_d9435709
UUID: f6ea355e_812d3ace
Bytes: 428
When making a 'move' or a 'diff', stashed_blocks will be used to calculate the max_stashed_blocks like line 450. If the unfreed blocks are deducted in advance, the temp_stash_usage could be smaller than what it is supposed to be, couldn't it? My test result shows no difference of max_stashed_blocks with or without this patch. But I guess this is because the wrong temp_stash_usage does not exceed the right max_stashed_blocks.

