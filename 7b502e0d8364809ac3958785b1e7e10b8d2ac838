Revision: 7b502e0d8364809ac3958785b1e7e10b8d2ac838
Patch-set: 1
File: core/binary.mk

1398:0-1402:5
Fri Apr 01 22:26:57 2016 +0000
Author: Dan Willemsen <1074628@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ec1e019_22569404
Bytes: 760
This really doesn't work at all -- the object file that is supposed to be generated doesn't get generated, which will cause everything downstream to fail.

My first suggestion was to split it into a different rule -- one to create a .o file, and another to create another (empty) timestamp file that would trigger the checks. Then the normal build could use both files, and the tidy-only build could just pull in the timestamp files.

But this doesn't work for incremental builds -- we don't get dependency information from clang-tidy, so you're relying on the fact that the "real" compile step is exporting all of the necessary dependencies. So that doesn't work unless clang-tidy doesn't read any of the include files, but that doesn't appear to be the case.

1398:0-1402:5
Fri Apr 01 23:16:05 2016 +0000
Author: Chih-hung Hsieh <1052399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ec1e019_22569404
UUID: 2ec1e019_6c1faea9
Bytes: 927
Like the static analyzer, it's difficult to run clang-tidy without normal compilation rules. I tried a separate tidy output file as a target but had the exact problem of generating required include files. That approach also requires a lot of cloning existing rules.

What works so far is to run a complete normal build first, or a normal build plus WITH_TIDY=1. Then run incremental builds 'mm' or 'mma' in a project directory repeatedly with WITH_TIDY=1 WITH_TIDY_ONLY=1 to fix tidy warnings. The .o files could be reused.

Without a complete set of .o files, I can run "mma -k" plus WITH_TIDY_ONLY=1 to get clang-tidy warnings and ignore all link errors.

I can experiment other ideas, e.g., adding a wrapper script. The current patch adds an optional call to clang-tidy in definitions.mk. It looks heavier but actually runs faster and I think also easier to maintain than the wrapper approach used by WITH_STATIC_ANALYZER=1.

1398:0-1402:5
Mon Apr 04 20:15:24 2016 +0000
Author: Dan Willemsen <1074628@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ec1e019_6c1faea9
UUID: 2ec1e019_f1bb64e6
Bytes: 368
The .o files will be reused (at least for now), but it's undefined what dependencies you will have after a WITH_TIDY_ONLY=1 run, since you didn't generate a new dependency file. It may work today, but is not guaranteed to work in the future.

It would be great if these tools generated real dependency files so that they could be properly be used within build systems.

