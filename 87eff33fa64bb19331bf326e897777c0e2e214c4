Revision: 87eff33fa64bb19331bf326e897777c0e2e214c4
Patch-set: 1
File: core/config_sanitizers.mk

117
Mon Mar 14 16:17:36 2016 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57bb093b_aeeefba5
Bytes: 94
Maybe compare directly with $($(LOCAL_2ND_ARCH_VAR_PREFIX)ADDRESS_SANITIZER_RUNTIME_LIBRARY) ?

117
Mon Mar 14 18:03:39 2016 +0000
Author: Chih-hung Hsieh <1052399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_aeeefba5
UUID: 57bb093b_349a5a8b
Bytes: 217
Although $(ADDRESS_SANITIZER_CONFIG_EXTRA_SHARED_LIBRARIES) is empty now, I think it is safer to check it too here.
make complains about recursive dependency if $(my_shared_libraries) contains current $(LOCAL_MODULE).

117
Mon Mar 14 18:08:02 2016 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_349a5a8b
UUID: 57bb093b_f4f9f294
Bytes: 228
If it's empty in all configurations, it's better to just remove it. An explicit check against ...RUNTIME_LIBRARY is a lot less confusing, and you can also move the my_static_libraries line below (line 121) under this check, too.

117
Mon Mar 14 18:27:21 2016 +0000
Author: Chih-hung Hsieh <1052399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_f4f9f294
UUID: 57bb093b_94586602
Bytes: 340
$(ADDRESS_SANITIZER_CONFIG_EXTRA_STATIC_LIBRARIES) is libasan, which we should check to avoid recursive dependency.
I guess ADDRESS_SANITIZER_CONFIG_EXTRA_SHARED_LIBRARIES  is there, although empty now, for the future in case we need something like libasan as shared library.
I think Dan added those two variables.
I will check it with him.

117
Mon Mar 14 18:38:08 2016 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_94586602
UUID: 57bb093b_14bf56f2
Bytes: 113
It used to contain libdl https://android-review.git.corp.google.com/#/c/155082/

Don't think we need it any more.

117
Mon Mar 14 18:43:20 2016 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_14bf56f2
UUID: 57bb093b_dfd04718
Bytes: 113
Hm, would not this thing apply to, say, libc, which asan library depends on, thus creating a circular dependency?

117
Mon Mar 14 19:00:28 2016 +0000
Author: Chih-hung Hsieh <1052399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_dfd04718
UUID: 57bb093b_bfa0e36b
Bytes: 129
I don't see circular dependency between libc and libasan now.
Maybe that's one reason libc is built with LOCAL_SANITIZE := never.

117
Mon Mar 14 19:00:28 2016 +0000
Author: Chih-hung Hsieh <1052399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_14bf56f2
UUID: 57bb093b_dfca0719
Bytes: 93
Okay, i am going to remove ADDRESS_SANITIZER_CONFIG_EXTRA_SHARED_LIBRARIES in my next upload.

117
Mon Mar 14 19:09:06 2016 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_bfa0e36b
UUID: 57bb093b_ff00abe6
Bytes: 85
Right, but this change adds libasan as a dependency to LOCAL_SANITIZE:=never targets.

117
Mon Mar 14 19:21:16 2016 +0000
Author: Chih-hung Hsieh <1052399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_ff00abe6
UUID: 57bb093b_9f623fa5
Bytes: 458
I see what you meant now.
When my_global_santitize is set, any LOCAL_SANITIZE:=never module still has a potential to depend on libasan, if it depends on something that uses libasan. This patch is to make that work to build any LOCAL_SANITIZE:=never module. We should make sure that libc does not actually use anything that uses libasan or libasan should not use libc. Then the extra unused link library should be okay. I think that condition is true for now.

117
Mon Mar 14 20:32:28 2016 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_9f623fa5
UUID: 57bb093b_fa739971
Bytes: 168
We already have libasan depending on libc.
Libc is LOCAL_SANITIZE:=never, so this change will make libc depend on libasan.
That's a dependency loop. Do I miss anything?

117
Mon Mar 14 21:01:29 2016 +0000
Author: Chih-hung Hsieh <1052399@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57bb093b_fa739971
UUID: 57bb093b_c5d87a38
Bytes: 272
libasan depends on libc, but libc does not depend on libasan.
Although this patch adds libasan.a to link with libc.so, it was linked with -Wl,--no-whole-archive, so code in libasan.a does not get into libc.so. Later it is still possible to use the libc.so without libasan.

