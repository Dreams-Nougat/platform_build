Revision: cff8e3385d9ed970dee51c8df034ecf64598385f
Patch-set: 5
File: core/java.mk

50
Thu Oct 23 10:15:45 2014 +0000
Author: Max Cai <1022968@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 351e565a_9a748d3f
Bytes: 1100
I'm always confused by the two ways to include library jars -- static and (I guess) dynamic. I suppose they matter only when building a library, where a static import will become part of the resulting jar and may go through ProGuard obfuscation if that library's build rule decides so.

This code is checking duplication in the dynamic libraries, and then add the dependency to the static libraries. Looks slightly awkward to me.

Maybe it's the correct thing to do, but I'm slightly worried about what would happen to my team:

In my team's case, both the main apk and a library it uses (BUILD_STATIC_JAVA_LIBRARY) import 2.3.0-nano statically. The library has explicit LOCAL_STATIC_JAVA_LIBRARIES dependency whereas the apk uses LOCAL_PROTOC_OPTIMIZE_TYPE=nano. There's no ProGuard obfuscation in the whole build process, so currently the two instances of nano.jar are deduplicated thanks to completely equal class definitions.

When this change lands, my team won't get the warning, but may end up importing two different versions of nano.jar resulting in (in the best case) build breaks or worse.

50
Thu Oct 23 14:24:43 2014 +0000
Author: Jeff Davidson <1006780@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 351e565a_9a748d3f
UUID: b58de6f4_46c72671
Bytes: 544
This was a bad copy-paste. Thanks for the catch. Naturally these are supposed to be the same variable at both ends.

However, I think you'd still have a possibility of a break in the case you mentioned. That's something that I think we just have to leave it to teams to address, and I note in the email draft that I sent out yesterday that hard-coded dependencies on -2.3.0- need to be removed.

Why does the library depend on LOCAL_STATIC_JAVA_LIBRARIES explicitly? Does it contain protos? Or just need access to common classes in the library?

