Revision: d2ba4ee01b328397095163e0e160e58e5b998640
Patch-set: 1
File: /COMMIT_MSG

20
Sun Aug 16 07:49:03 2015 +0000
Author: Gilad Arnold <1076344@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 04b861a5_f0bdb1ae
Bytes: 134
To complete the picture, it'll be useful to show how DBus proxies are consumed by a client (both Android.mk and #includes directives).

File: core/binary.mk

614
Sun Aug 16 07:43:14 2015 +0000
Author: Gilad Arnold <1076344@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4fb1585_bb61b3b6
Bytes: 491
This could be written so more logic is shared:

 ifdef LOCAL_DBUS_PROXY_PREFIX
 dbus_created_dir := $(dbus_header_prefix)/include/$(LOCAL_DBUS_PROXY_PREFIX)
 dbus_headers := dbus-proxies.h
 else
 dbus_created_dir := $(dbus_header_prefix)
 dbus_headers := $(patsubst %.dbus.xml,%.h,$(notdir $(dbus_if_sources)))
 endif  # $(LOCAL_DBUS_PROXY_PREFIX)
 dbus_generated_headers := $(addprefix $(dbus_created_dir),$(dbus_headers))

Thereafter, replace dbus_proxy_header with dbus_generated_headers.

614
Tue Aug 18 02:02:44 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a4fb1585_bb61b3b6
UUID: 04b861a5_9f8a3ef6
Bytes: 8
I agree.

614
Tue Aug 18 19:45:16 2015 +0000
Author: Christopher Wiley <1057759@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 04b861a5_9f8a3ef6
UUID: a4fb1585_27c80149
Bytes: 4
Done

621:28-621:52
Tue Aug 18 02:02:44 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c471e91c_6e9e83e9
Bytes: 80
this variable is unnecessary.
You can get it with $(dir $@) in the build recipe.

621:28-621:52
Tue Aug 18 19:45:16 2015 +0000
Author: Christopher Wiley <1057759@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c471e91c_6e9e83e9
UUID: c471e91c_d90f43e9
Bytes: 5
Done.

623:28-623:94
Tue Aug 18 02:02:44 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4a8755c_905231b5
Bytes: 380
this doesn't work if we have more than one .dbus.xml file.
If you have multiple .dbus.xml files, a single .h file should depend on only the corresponding .dbus.xml file, right?
In that case you should use static pattern rule, similar to the .pb.h rule:
$(proto_generated_headers): $(proto_generated_sources_dir)/%.pb.h: $(proto_generated_sources_dir)/%.pb$(my_proto_source_suffix)

623:28-623:94
Tue Aug 18 19:45:16 2015 +0000
Author: Christopher Wiley <1057759@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a4a8755c_905231b5
UUID: a4a8755c_191f4d94
Bytes: 775
There are two cases here.

For proxies, we depend on all listed .dbus.xml files and generate a single C++ header file.  For adaptors, the correspondence is 1:1.

For adaptors, we have 1:1 dependency between .dbus.xml files and generated header files.  However, the .dbus.xml files may be anywhere in the source directory, and I have a hard time writing a simple pattern matching rule that expresses that:

$(output_prefix)/%.h : $(some_variable_prefix)/%.dbus.xml

I can do this, but I'm going to need to eval() a template to get that right.  Update incoming.

Given how rare it is to actually change these .dbus.xml files and the amount of overhead it is to generate the corresponding header files, I judged it reasonable to simplify the build logic by depending generously.

630:1-630:27
Tue Aug 18 02:02:44 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64591d73_102c1198
Bytes: 36
should be my_export_c_include_dirs .

630:1-630:27
Tue Aug 18 19:45:16 2015 +0000
Author: Christopher Wiley <1057759@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64591d73_102c1198
UUID: e4434d7f_afe9732e
Bytes: 311
There is no my_export_c_include_dirs.  Instead, it seems that various places in this file have been editing LOCAL_EXPORT_C_INCLUDE_DIRS directly.  I was unsure why this was the case.

With your permission, I'm going to keep this as is, and do the refactor to add a my_export_c_include_dirs in a following patch?

File: core/clear_vars.mk

183
Sat Aug 15 00:50:58 2015 +0000
Author: Christopher Wiley <1057759@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4a9e95f_5a2141a7
Bytes: 192
This prefix allows us to namespace the installed headers, without depending on the name of the module.  This is important when a target wants to consume headers from multiple client libraries.

183
Tue Aug 18 02:02:44 2015 +0000
Author: Ying Wang <1003981@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4a9e95f_5a2141a7
UUID: a4a8755c_90bb115d
Bytes: 91
I don't understand: why using the module name as your LOCAL_DBUS_PROXY_PREFIX doesn't work?

183
Tue Aug 18 21:06:50 2015 +0000
Author: Christopher Wiley <1057759@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a4a8755c_90bb115d
UUID: c471e91c_1fb0db29
Bytes: 655
Doing it this way serves two purposes:

1) It lets Android.mk authors declare whether they intend to generate proxies or adaptors.

2) It lets Android.mk authors explicitly control the include path of proxies independent of target names.  While I don't feel too strongly about it, it was pointed out that the path we put these proxies at is encoded into the source code:

#include <VALUE_OF_PROXY_PREFIX/dbus-proxies.h>

and that it seems odd to have that source code depend on the name of the module.  This is doubly annoying for code that has to compile on ChromeOS and Android, because that path has to make sense on both platforms.

What do you think?

